// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'model/objectbox/bank_and_wallet_struct.dart';
import 'model/objectbox/bill_struct.dart';
import 'model/objectbox/config_struct.dart';
import 'model/objectbox/employees_struct.dart';
import 'model/objectbox/member_struct.dart';
import 'model/objectbox/pos_log_struct.dart';
import 'model/objectbox/printer_struct.dart';
import 'model/objectbox/product_barcode_struct.dart';
import 'model/objectbox/product_category_struct.dart';
import 'model/objectbox/wallet_struct.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 1146034735562944753),
      name: 'BankAndWalletObjectBoxStruct',
      lastPropertyId: const IdUid(12, 5364341155121034249),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5769841452185784753),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2283351685090061103),
            name: 'paymentcode',
            type: 9,
            flags: 2080,
            indexId: const IdUid(1, 6810831193671046402)),
        ModelProperty(
            id: const IdUid(3, 3372840907916193930),
            name: 'countrycode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2145644088359987742),
            name: 'name1',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4109794776076031765),
            name: 'name2',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3418122982083316350),
            name: 'name3',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6647294492863525982),
            name: 'name4',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 6377783545057820492),
            name: 'name5',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 5733854389592636095),
            name: 'paymentlogo',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 8282880077879675916),
            name: 'paymenttype',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 817638274354292766),
            name: 'feeRate',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 5364341155121034249),
            name: 'wallettype',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 5035133149351921342),
      name: 'BillDetailExtraObjectBoxStruct',
      lastPropertyId: const IdUid(12, 6597758841446847175),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4239738525701679098),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4737365283377504240),
            name: 'doc_number',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1157028304764440004),
            name: 'ref_line_number',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8675408437274099435),
            name: 'line_number',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7529431725980821240),
            name: 'barcode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 915209875599924290),
            name: 'item_code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8469390973759139464),
            name: 'item_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 145193774253669790),
            name: 'unit_code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6256222853074739179),
            name: 'unit_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 3275526030269492261),
            name: 'qty',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 8551988644639145117),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 6597758841446847175),
            name: 'total_amount',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 8200473711235576786),
      name: 'BillDetailObjectBoxStruct',
      lastPropertyId: const IdUid(13, 7905978071712598234),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7802945613114588797),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8332650095147136072),
            name: 'doc_number',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5597006969350660657),
            name: 'line_number',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4768966917068054444),
            name: 'barcode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 661025456042724616),
            name: 'item_code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1622373353092901714),
            name: 'item_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8904602737830523717),
            name: 'unit_code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4608698135749053796),
            name: 'unit_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2881155224631238642),
            name: 'qty',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 5757444345518915894),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 5832876287284566707),
            name: 'discount_text',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 6448865193232325067),
            name: 'discount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 7905978071712598234),
            name: 'total_amount',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 1784956285063092638),
      name: 'BillObjectBoxStruct',
      lastPropertyId: const IdUid(21, 8298043862021191374),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2619240354471613801),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2135555364547627425),
            name: 'doc_number',
            type: 9,
            flags: 2080,
            indexId: const IdUid(2, 6497985786999483173)),
        ModelProperty(
            id: const IdUid(3, 118657800164103024),
            name: 'date_time',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 2774530181598564541),
            name: 'customer_code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3733418585324084529),
            name: 'customer_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 2383556816852304743),
            name: 'customer_telephone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1453861610292343448),
            name: 'total_amount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5124026047741157775),
            name: 'sale_code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8776910278633798385),
            name: 'sale_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 801200284048978249),
            name: 'is_sync',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 6990550890033544410),
            name: 'cashier_code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 732807839383699839),
            name: 'cashier_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 5834439640630920125),
            name: 'pay_cash_amount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 3541771743061204879),
            name: 'discount_formula',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 2271278130534666477),
            name: 'sum_discount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 7335730019120480512),
            name: 'sum_credit_card',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 6109222269050332050),
            name: 'sum_money_transfer',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 3428492714288103620),
            name: 'sum_cheque',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 1513641659133597593),
            name: 'sum_coupon',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 8298043862021191374),
            name: 'sum_qr_code',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 7075751635639607639),
      name: 'BillPayObjectBoxStruct',
      lastPropertyId: const IdUid(21, 277199354269320237),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1596410271388201319),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6407742153308264929),
            name: 'doc_number',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5936006177150495079),
            name: 'trans_flag',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3837067549274503457),
            name: 'bank_code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8685486442910976564),
            name: 'bank_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5952661843983270685),
            name: 'bank_account_no',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 7269180737591199430),
            name: 'card_number',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5118011203391952312),
            name: 'approved_code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 2846400664675873176),
            name: 'doc_date_time',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 844933491981772691),
            name: 'branch_number',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 841489037907652157),
            name: 'bank_referance',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 1426124240551915374),
            name: 'due_date',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 6517542959853641305),
            name: 'cheque_number',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 6750031327279932549),
            name: 'code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 4304442135148479917),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 1026101520946121867),
            name: 'number',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 4413991455408555318),
            name: 'referance_one',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 7039389348481784033),
            name: 'referance_two',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 3279654424233188732),
            name: 'provider_code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 9209986603392056802),
            name: 'provider_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 277199354269320237),
            name: 'amount',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 1162831814308106896),
      name: 'ConfigObjectBoxStruct',
      lastPropertyId: const IdUid(3, 7361895675452458520),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3339566010883661331),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4892252268093927252),
            name: 'device_code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7361895675452458520),
            name: 'last_doc_number',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 4224485752852947885),
      name: 'EmployeeObjectBoxStruct',
      lastPropertyId: const IdUid(6, 9035778007223633655),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 388810131208359600),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4792815990252412549),
            name: 'guidfixed',
            type: 9,
            flags: 2080,
            indexId: const IdUid(3, 6294095423857103477)),
        ModelProperty(
            id: const IdUid(3, 8128093263389703452),
            name: 'code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5730527790961685603),
            name: 'username',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8775532156783442612),
            name: 'profilepicture',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 9035778007223633655),
            name: 'name',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 6112838636353604158),
      name: 'MemberObjectBoxStruct',
      lastPropertyId: const IdUid(12, 5159799296727879845),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6346803462781096608),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4371969015836101455),
            name: 'guidfixed',
            type: 9,
            flags: 2080,
            indexId: const IdUid(4, 4862384355362163351)),
        ModelProperty(
            id: const IdUid(3, 864477947317268223),
            name: 'address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7694412760550714080),
            name: 'branchcode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2186291899858027558),
            name: 'branchtype',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5514587754540901657),
            name: 'contacttype',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 4501247310374040308),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8344766107997284992),
            name: 'personaltype',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8943404241503059150),
            name: 'surname',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2624296339032804208),
            name: 'taxid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 7947895959104899051),
            name: 'telephone',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 5159799296727879845),
            name: 'zipcode',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 5736757595189524590),
      name: 'PosLogObjectBoxStruct',
      lastPropertyId: const IdUid(24, 7592183109660791959),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 349951715793914751),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6858922993565413318),
            name: 'guid_auto_fixed',
            type: 9,
            flags: 2080,
            indexId: const IdUid(5, 7236798270523925651)),
        ModelProperty(
            id: const IdUid(3, 3392774869454169444),
            name: 'guid_ref',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8096718385367013075),
            name: 'guid_code_ref',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2596672189048611394),
            name: 'log_date_time',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 3423933695813107025),
            name: 'hold_number',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 1224085958776314107),
            name: 'command_code',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3029589679161464166),
            name: 'is_void',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3960695798703464222),
            name: 'success',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4135542810736301787),
            name: 'extra_code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 6872044419450107594),
            name: 'remark',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 1388231681468617274),
            name: 'discountText',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 6819744797050081108),
            name: 'code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 5772749487478272189),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 5229819847199260872),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 982161165336430050),
            name: 'qty',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 3695641302177285606),
            name: 'qty_fixed',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 4118517876983655815),
            name: 'default_code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 5151991621648540749),
            name: 'selected',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 3067949834490291020),
            name: 'unit_code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(22, 690900736671886520),
            name: 'unit_name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(23, 1553987918665551717),
            name: 'barcode',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 8497996969638502373),
      name: 'PrinterObjectBoxStruct',
      lastPropertyId: const IdUid(7, 6385725473387008917),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2627973960708826415),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6842038945917471942),
            name: 'code',
            type: 9,
            flags: 2080,
            indexId: const IdUid(6, 1201447302378968444)),
        ModelProperty(
            id: const IdUid(3, 2676614715518621556),
            name: 'guid_fixed',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5306949990485921069),
            name: 'name1',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5170826271629751237),
            name: 'type',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7529973051200654325),
            name: 'print_ip_address',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6385725473387008917),
            name: 'printer_port',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 2320464900211169166),
      name: 'ProductBarcodeObjectBoxStruct',
      lastPropertyId: const IdUid(27, 2602671413310264723),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6866829504783575578),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 2183581316073885624),
            name: 'barcode',
            type: 9,
            flags: 2080,
            indexId: const IdUid(7, 4001643744485849449)),
        ModelProperty(
            id: const IdUid(3, 128268912818831567),
            name: 'names',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1898030965134642083),
            name: 'name_all',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8100041463221519691),
            name: 'guid_fixed',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5169216810593972048),
            name: 'item_guid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 3948816048500249260),
            name: 'descriptions',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 4431391709402412395),
            name: 'item_code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 8694328930872834872),
            name: 'item_unit_code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 7589705064038847345),
            name: 'unit_code',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(13, 308762073223941852),
            name: 'unit_names',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 2166942377076170762),
            name: 'new_line',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 482812965783156640),
            name: 'product_count',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 4648327578977629795),
            name: 'options_json',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 4408094660257096893),
            name: 'images_url',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(20, 5934728758753332729),
            name: 'color_select',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(21, 815626255346012414),
            name: 'color_select_hex',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(24, 8246333664740325981),
            name: 'image_or_color',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(27, 2602671413310264723),
            name: 'prices',
            type: 30,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(12, 3870970304180097832),
      name: 'ProductCategoryObjectBoxStruct',
      lastPropertyId: const IdUid(19, 314613545527023253),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8929057088895083217),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(3, 4849195677283264754),
            name: 'guid_fixed',
            type: 9,
            flags: 2080,
            indexId: const IdUid(12, 3301175078738520112)),
        ModelProperty(
            id: const IdUid(4, 730340412401747952),
            name: 'names',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3611893689138283912),
            name: 'image_url',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 5655321350001673979),
            name: 'colorselect',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(12, 2322472737243761810),
            name: 'colorselecthex',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 2847270273296031837),
            name: 'codelist',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(16, 657605556722911522),
            name: 'parent_guid_fixed',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 7860457842035766061),
            name: 'use_image_or_color',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 8605883164466481353),
            name: 'xorder',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(19, 314613545527023253),
            name: 'category_count',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(13, 2941303872910854793),
      name: 'WalletStruct',
      lastPropertyId: const IdUid(8, 2820131271821243291),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 8851689514169263650),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6446207190092500073),
            name: 'code',
            type: 9,
            flags: 2080,
            indexId: const IdUid(10, 4271700392297615589)),
        ModelProperty(
            id: const IdUid(3, 7729496925826572689),
            name: 'name1',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3894452192199305833),
            name: 'name2',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5186272826191435990),
            name: 'name3',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5246659831268309293),
            name: 'name4',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6535549143100183835),
            name: 'name5',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 2820131271821243291),
            name: 'image',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(13, 2941303872910854793),
      lastIndexId: const IdUid(12, 3301175078738520112),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [
        9219344176730085609,
        2276328705805420932,
        5444144693635609139
      ],
      retiredPropertyUids: const [
        5697435774194423126,
        3065536162123372494,
        1553269579545608180,
        5071995380558250113,
        1282192585569651427,
        6780051601682911384,
        3446702913728850256,
        8412111174913227945,
        8483056954515323331,
        7592183109660791959,
        5721639400649062388,
        6511194312439548720,
        6556829884253670378,
        5881502430415090972,
        1973364722765814974,
        2403838603731837931,
        4701702388568208232,
        6627277916891706326,
        7770745563320712682
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    BankAndWalletObjectBoxStruct:
        EntityDefinition<BankAndWalletObjectBoxStruct>(
            model: _entities[0],
            toOneRelations: (BankAndWalletObjectBoxStruct object) => [],
            toManyRelations: (BankAndWalletObjectBoxStruct object) => {},
            getId: (BankAndWalletObjectBoxStruct object) => object.id,
            setId: (BankAndWalletObjectBoxStruct object, int id) {
              object.id = id;
            },
            objectToFB: (BankAndWalletObjectBoxStruct object, fb.Builder fbb) {
              final paymentcodeOffset = fbb.writeString(object.paymentcode);
              final countrycodeOffset = fbb.writeString(object.countrycode);
              final name1Offset = fbb.writeString(object.name1);
              final name2Offset = fbb.writeString(object.name2);
              final name3Offset = fbb.writeString(object.name3);
              final name4Offset = fbb.writeString(object.name4);
              final name5Offset = fbb.writeString(object.name5);
              final paymentlogoOffset = fbb.writeString(object.paymentlogo);
              fbb.startTable(13);
              fbb.addInt64(0, object.id);
              fbb.addOffset(1, paymentcodeOffset);
              fbb.addOffset(2, countrycodeOffset);
              fbb.addOffset(3, name1Offset);
              fbb.addOffset(4, name2Offset);
              fbb.addOffset(5, name3Offset);
              fbb.addOffset(6, name4Offset);
              fbb.addOffset(7, name5Offset);
              fbb.addOffset(8, paymentlogoOffset);
              fbb.addInt64(9, object.paymenttype);
              fbb.addFloat64(10, object.feeRate);
              fbb.addInt64(11, object.wallettype);
              fbb.finish(fbb.endTable());
              return object.id;
            },
            objectFromFB: (Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);

              final object = BankAndWalletObjectBoxStruct(
                  paymentcode: const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 6, ''),
                  countrycode: const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 8, ''),
                  name1: const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 10, ''),
                  name2: const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 12, ''),
                  name3: const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 14, ''),
                  name4: const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 16, ''),
                  name5: const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 18, ''),
                  paymentlogo: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 20, ''),
                  paymenttype: const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0),
                  wallettype: const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0),
                  feeRate: const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0))
                ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

              return object;
            }),
    BillDetailExtraObjectBoxStruct:
        EntityDefinition<BillDetailExtraObjectBoxStruct>(
            model: _entities[1],
            toOneRelations: (BillDetailExtraObjectBoxStruct object) => [],
            toManyRelations: (BillDetailExtraObjectBoxStruct object) => {},
            getId: (BillDetailExtraObjectBoxStruct object) => object.id,
            setId: (BillDetailExtraObjectBoxStruct object, int id) {
              object.id = id;
            },
            objectToFB:
                (BillDetailExtraObjectBoxStruct object, fb.Builder fbb) {
              final doc_numberOffset = fbb.writeString(object.doc_number);
              final barcodeOffset = fbb.writeString(object.barcode);
              final item_codeOffset = fbb.writeString(object.item_code);
              final item_nameOffset = fbb.writeString(object.item_name);
              final unit_codeOffset = fbb.writeString(object.unit_code);
              final unit_nameOffset = fbb.writeString(object.unit_name);
              fbb.startTable(13);
              fbb.addInt64(0, object.id);
              fbb.addOffset(1, doc_numberOffset);
              fbb.addInt64(2, object.ref_line_number);
              fbb.addInt64(3, object.line_number);
              fbb.addOffset(4, barcodeOffset);
              fbb.addOffset(5, item_codeOffset);
              fbb.addOffset(6, item_nameOffset);
              fbb.addOffset(7, unit_codeOffset);
              fbb.addOffset(8, unit_nameOffset);
              fbb.addFloat64(9, object.qty);
              fbb.addFloat64(10, object.price);
              fbb.addFloat64(11, object.total_amount);
              fbb.finish(fbb.endTable());
              return object.id;
            },
            objectFromFB: (Store store, ByteData fbData) {
              final buffer = fb.BufferContext(fbData);
              final rootOffset = buffer.derefObject(0);

              final object = BillDetailExtraObjectBoxStruct(
                  id: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 4, 0),
                  line_number: const fb.Int64Reader()
                      .vTableGet(buffer, rootOffset, 10, 0),
                  barcode: const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 12, ''),
                  item_code: const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 14, ''),
                  item_name: const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 16, ''),
                  unit_code: const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 18, ''),
                  unit_name: const fb.StringReader(asciiOptimization: true)
                      .vTableGet(buffer, rootOffset, 20, ''),
                  qty: const fb.Float64Reader()
                      .vTableGet(buffer, rootOffset, 22, 0),
                  doc_number: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 6, ''),
                  price: const fb.Float64Reader().vTableGet(buffer, rootOffset, 24, 0),
                  ref_line_number: const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
                  total_amount: const fb.Float64Reader().vTableGet(buffer, rootOffset, 26, 0));

              return object;
            }),
    BillDetailObjectBoxStruct: EntityDefinition<BillDetailObjectBoxStruct>(
        model: _entities[2],
        toOneRelations: (BillDetailObjectBoxStruct object) => [],
        toManyRelations: (BillDetailObjectBoxStruct object) => {},
        getId: (BillDetailObjectBoxStruct object) => object.id,
        setId: (BillDetailObjectBoxStruct object, int id) {
          object.id = id;
        },
        objectToFB: (BillDetailObjectBoxStruct object, fb.Builder fbb) {
          final doc_numberOffset = fbb.writeString(object.doc_number);
          final barcodeOffset = fbb.writeString(object.barcode);
          final item_codeOffset = fbb.writeString(object.item_code);
          final item_nameOffset = fbb.writeString(object.item_name);
          final unit_codeOffset = fbb.writeString(object.unit_code);
          final unit_nameOffset = fbb.writeString(object.unit_name);
          final discount_textOffset = fbb.writeString(object.discount_text);
          fbb.startTable(14);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, doc_numberOffset);
          fbb.addInt64(2, object.line_number);
          fbb.addOffset(3, barcodeOffset);
          fbb.addOffset(4, item_codeOffset);
          fbb.addOffset(5, item_nameOffset);
          fbb.addOffset(6, unit_codeOffset);
          fbb.addOffset(7, unit_nameOffset);
          fbb.addFloat64(8, object.qty);
          fbb.addFloat64(9, object.price);
          fbb.addOffset(10, discount_textOffset);
          fbb.addFloat64(11, object.discount);
          fbb.addFloat64(12, object.total_amount);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = BillDetailObjectBoxStruct(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              line_number:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              barcode: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              item_code: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              item_name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              unit_code: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              unit_name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              qty:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 20, 0),
              doc_number: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              price:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 22, 0),
              discount_text: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 24, ''),
              discount: const fb.Float64Reader().vTableGet(buffer, rootOffset, 26, 0),
              total_amount: const fb.Float64Reader().vTableGet(buffer, rootOffset, 28, 0));

          return object;
        }),
    BillObjectBoxStruct: EntityDefinition<BillObjectBoxStruct>(
        model: _entities[3],
        toOneRelations: (BillObjectBoxStruct object) => [],
        toManyRelations: (BillObjectBoxStruct object) => {},
        getId: (BillObjectBoxStruct object) => object.id,
        setId: (BillObjectBoxStruct object, int id) {
          object.id = id;
        },
        objectToFB: (BillObjectBoxStruct object, fb.Builder fbb) {
          final doc_numberOffset = fbb.writeString(object.doc_number);
          final customer_codeOffset = fbb.writeString(object.customer_code);
          final customer_nameOffset = fbb.writeString(object.customer_name);
          final customer_telephoneOffset =
              fbb.writeString(object.customer_telephone);
          final sale_codeOffset = fbb.writeString(object.sale_code);
          final sale_nameOffset = fbb.writeString(object.sale_name);
          final cashier_codeOffset = fbb.writeString(object.cashier_code);
          final cashier_nameOffset = fbb.writeString(object.cashier_name);
          final discount_formulaOffset =
              fbb.writeString(object.discount_formula);
          fbb.startTable(22);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, doc_numberOffset);
          fbb.addInt64(2, object.date_time.millisecondsSinceEpoch);
          fbb.addOffset(3, customer_codeOffset);
          fbb.addOffset(4, customer_nameOffset);
          fbb.addOffset(5, customer_telephoneOffset);
          fbb.addFloat64(6, object.total_amount);
          fbb.addOffset(7, sale_codeOffset);
          fbb.addOffset(8, sale_nameOffset);
          fbb.addBool(9, object.is_sync);
          fbb.addOffset(10, cashier_codeOffset);
          fbb.addOffset(11, cashier_nameOffset);
          fbb.addFloat64(12, object.pay_cash_amount);
          fbb.addOffset(13, discount_formulaOffset);
          fbb.addFloat64(14, object.sum_discount);
          fbb.addFloat64(16, object.sum_credit_card);
          fbb.addFloat64(17, object.sum_money_transfer);
          fbb.addFloat64(18, object.sum_cheque);
          fbb.addFloat64(19, object.sum_coupon);
          fbb.addFloat64(20, object.sum_qr_code);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = BillObjectBoxStruct(
              doc_number: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              date_time: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              customer_code: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              customer_name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              customer_telephone: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              total_amount:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 16, 0),
              cashier_code: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 24, ''),
              cashier_name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 26, ''),
              sale_code: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 18, ''),
              sale_name: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 20, ''),
              is_sync: const fb.BoolReader().vTableGet(buffer, rootOffset, 22, false),
              discount_formula: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 30, ''),
              pay_cash_amount: const fb.Float64Reader().vTableGet(buffer, rootOffset, 28, 0),
              sum_discount: const fb.Float64Reader().vTableGet(buffer, rootOffset, 32, 0),
              sum_qr_code: const fb.Float64Reader().vTableGet(buffer, rootOffset, 44, 0),
              sum_credit_card: const fb.Float64Reader().vTableGet(buffer, rootOffset, 36, 0),
              sum_money_transfer: const fb.Float64Reader().vTableGet(buffer, rootOffset, 38, 0),
              sum_coupon: const fb.Float64Reader().vTableGet(buffer, rootOffset, 42, 0),
              sum_cheque: const fb.Float64Reader().vTableGet(buffer, rootOffset, 40, 0))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    BillPayObjectBoxStruct: EntityDefinition<BillPayObjectBoxStruct>(
        model: _entities[4],
        toOneRelations: (BillPayObjectBoxStruct object) => [],
        toManyRelations: (BillPayObjectBoxStruct object) => {},
        getId: (BillPayObjectBoxStruct object) => object.id,
        setId: (BillPayObjectBoxStruct object, int id) {
          object.id = id;
        },
        objectToFB: (BillPayObjectBoxStruct object, fb.Builder fbb) {
          final doc_numberOffset = fbb.writeString(object.doc_number);
          final bank_codeOffset = fbb.writeString(object.bank_code);
          final bank_nameOffset = fbb.writeString(object.bank_name);
          final bank_account_noOffset = fbb.writeString(object.bank_account_no);
          final card_numberOffset = fbb.writeString(object.card_number);
          final approved_codeOffset = fbb.writeString(object.approved_code);
          final branch_numberOffset = fbb.writeString(object.branch_number);
          final bank_referanceOffset = fbb.writeString(object.bank_referance);
          final cheque_numberOffset = fbb.writeString(object.cheque_number);
          final codeOffset = fbb.writeString(object.code);
          final descriptionOffset = fbb.writeString(object.description);
          final numberOffset = fbb.writeString(object.number);
          final referance_oneOffset = fbb.writeString(object.referance_one);
          final referance_twoOffset = fbb.writeString(object.referance_two);
          final provider_codeOffset = fbb.writeString(object.provider_code);
          final provider_nameOffset = fbb.writeString(object.provider_name);
          fbb.startTable(22);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, doc_numberOffset);
          fbb.addInt64(2, object.trans_flag);
          fbb.addOffset(3, bank_codeOffset);
          fbb.addOffset(4, bank_nameOffset);
          fbb.addOffset(5, bank_account_noOffset);
          fbb.addOffset(6, card_numberOffset);
          fbb.addOffset(7, approved_codeOffset);
          fbb.addInt64(8, object.doc_date_time.millisecondsSinceEpoch);
          fbb.addOffset(9, branch_numberOffset);
          fbb.addOffset(10, bank_referanceOffset);
          fbb.addInt64(11, object.due_date.millisecondsSinceEpoch);
          fbb.addOffset(12, cheque_numberOffset);
          fbb.addOffset(13, codeOffset);
          fbb.addOffset(14, descriptionOffset);
          fbb.addOffset(15, numberOffset);
          fbb.addOffset(16, referance_oneOffset);
          fbb.addOffset(17, referance_twoOffset);
          fbb.addOffset(18, provider_codeOffset);
          fbb.addOffset(19, provider_nameOffset);
          fbb.addFloat64(20, object.amount);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = BillPayObjectBoxStruct(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              doc_number: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              trans_flag:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              bank_code: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              card_number: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              approved_code: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              bank_name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              bank_account_no: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              branch_number: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, ''),
              bank_referance: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 24, ''),
              cheque_number: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 28, ''),
              code: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 30, ''),
              description: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 32, ''),
              number: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 34, ''),
              referance_one: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 36, ''),
              referance_two: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 38, ''),
              provider_code: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 40, ''),
              provider_name: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 42, ''),
              amount: const fb.Float64Reader().vTableGet(buffer, rootOffset, 44, 0))
            ..doc_date_time = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0))
            ..due_date = DateTime.fromMillisecondsSinceEpoch(const fb.Int64Reader().vTableGet(buffer, rootOffset, 26, 0));

          return object;
        }),
    ConfigObjectBoxStruct: EntityDefinition<ConfigObjectBoxStruct>(
        model: _entities[5],
        toOneRelations: (ConfigObjectBoxStruct object) => [],
        toManyRelations: (ConfigObjectBoxStruct object) => {},
        getId: (ConfigObjectBoxStruct object) => object.id,
        setId: (ConfigObjectBoxStruct object, int id) {
          object.id = id;
        },
        objectToFB: (ConfigObjectBoxStruct object, fb.Builder fbb) {
          final device_codeOffset = fbb.writeString(object.device_code);
          final last_doc_numberOffset = fbb.writeString(object.last_doc_number);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, device_codeOffset);
          fbb.addOffset(2, last_doc_numberOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ConfigObjectBoxStruct(
              device_code: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              last_doc_number: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    EmployeeObjectBoxStruct: EntityDefinition<EmployeeObjectBoxStruct>(
        model: _entities[6],
        toOneRelations: (EmployeeObjectBoxStruct object) => [],
        toManyRelations: (EmployeeObjectBoxStruct object) => {},
        getId: (EmployeeObjectBoxStruct object) => object.id,
        setId: (EmployeeObjectBoxStruct object, int id) {
          object.id = id;
        },
        objectToFB: (EmployeeObjectBoxStruct object, fb.Builder fbb) {
          final guidfixedOffset = fbb.writeString(object.guidfixed);
          final codeOffset = fbb.writeString(object.code);
          final usernameOffset = fbb.writeString(object.username);
          final profilepictureOffset = fbb.writeString(object.profilepicture);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, guidfixedOffset);
          fbb.addOffset(2, codeOffset);
          fbb.addOffset(3, usernameOffset);
          fbb.addOffset(4, profilepictureOffset);
          fbb.addOffset(5, nameOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = EmployeeObjectBoxStruct(
              guidfixed: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              username: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              code: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              profilepicture: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    MemberObjectBoxStruct: EntityDefinition<MemberObjectBoxStruct>(
        model: _entities[7],
        toOneRelations: (MemberObjectBoxStruct object) => [],
        toManyRelations: (MemberObjectBoxStruct object) => {},
        getId: (MemberObjectBoxStruct object) => object.id,
        setId: (MemberObjectBoxStruct object, int id) {
          object.id = id;
        },
        objectToFB: (MemberObjectBoxStruct object, fb.Builder fbb) {
          final guidfixedOffset = fbb.writeString(object.guidfixed);
          final addressOffset = fbb.writeString(object.address);
          final branchcodeOffset = fbb.writeString(object.branchcode);
          final nameOffset = fbb.writeString(object.name);
          final surnameOffset = fbb.writeString(object.surname);
          final taxidOffset = fbb.writeString(object.taxid);
          final telephoneOffset = fbb.writeString(object.telephone);
          final zipcodeOffset = fbb.writeString(object.zipcode);
          fbb.startTable(13);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, guidfixedOffset);
          fbb.addOffset(2, addressOffset);
          fbb.addOffset(3, branchcodeOffset);
          fbb.addInt64(4, object.branchtype);
          fbb.addInt64(5, object.contacttype);
          fbb.addOffset(6, nameOffset);
          fbb.addInt64(7, object.personaltype);
          fbb.addOffset(8, surnameOffset);
          fbb.addOffset(9, taxidOffset);
          fbb.addOffset(10, telephoneOffset);
          fbb.addOffset(11, zipcodeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = MemberObjectBoxStruct(
              guidfixed: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              address: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              branchcode: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              branchtype:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              contacttype:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              personaltype:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
              surname: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              taxid:
                  const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 22, ''),
              telephone: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 24, ''),
              zipcode: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 26, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    PosLogObjectBoxStruct: EntityDefinition<PosLogObjectBoxStruct>(
        model: _entities[8],
        toOneRelations: (PosLogObjectBoxStruct object) => [],
        toManyRelations: (PosLogObjectBoxStruct object) => {},
        getId: (PosLogObjectBoxStruct object) => object.id,
        setId: (PosLogObjectBoxStruct object, int id) {
          object.id = id;
        },
        objectToFB: (PosLogObjectBoxStruct object, fb.Builder fbb) {
          final guid_auto_fixedOffset = fbb.writeString(object.guid_auto_fixed);
          final guid_refOffset = fbb.writeString(object.guid_ref);
          final guid_code_refOffset = fbb.writeString(object.guid_code_ref);
          final extra_codeOffset = fbb.writeString(object.extra_code);
          final remarkOffset = fbb.writeString(object.remark);
          final discountTextOffset = fbb.writeString(object.discountText);
          final codeOffset = fbb.writeString(object.code);
          final nameOffset = fbb.writeString(object.name);
          final default_codeOffset = fbb.writeString(object.default_code);
          final unit_codeOffset = fbb.writeString(object.unit_code);
          final unit_nameOffset = fbb.writeString(object.unit_name);
          final barcodeOffset = fbb.writeString(object.barcode);
          fbb.startTable(25);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, guid_auto_fixedOffset);
          fbb.addOffset(2, guid_refOffset);
          fbb.addOffset(3, guid_code_refOffset);
          fbb.addInt64(4, object.log_date_time.millisecondsSinceEpoch);
          fbb.addInt64(5, object.hold_number);
          fbb.addInt64(6, object.command_code);
          fbb.addInt64(7, object.is_void);
          fbb.addInt64(8, object.success);
          fbb.addOffset(9, extra_codeOffset);
          fbb.addOffset(10, remarkOffset);
          fbb.addOffset(11, discountTextOffset);
          fbb.addOffset(12, codeOffset);
          fbb.addFloat64(13, object.price);
          fbb.addOffset(15, nameOffset);
          fbb.addFloat64(16, object.qty);
          fbb.addFloat64(17, object.qty_fixed);
          fbb.addOffset(18, default_codeOffset);
          fbb.addBool(19, object.selected);
          fbb.addOffset(20, unit_codeOffset);
          fbb.addOffset(21, unit_nameOffset);
          fbb.addOffset(22, barcodeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PosLogObjectBoxStruct(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              guid_ref: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              guid_code_ref: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              log_date_time: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0)),
              hold_number:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
              command_code:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
              barcode: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 48, ''),
              is_void:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0),
              success:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0),
              qty:
                  const fb.Float64Reader().vTableGet(buffer, rootOffset, 36, 0),
              qty_fixed: const fb.Float64Reader().vTableGet(buffer, rootOffset, 38, 0),
              price: const fb.Float64Reader().vTableGet(buffer, rootOffset, 30, 0),
              selected: const fb.BoolReader().vTableGet(buffer, rootOffset, 42, false),
              remark: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 24, ''),
              name: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 34, ''),
              code: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 28, ''),
              default_code: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 40, ''),
              discountText: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 26, ''),
              extra_code: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 22, ''),
              unit_code: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 44, ''),
              unit_name: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 46, ''))
            ..guid_auto_fixed = const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 6, '');

          return object;
        }),
    PrinterObjectBoxStruct: EntityDefinition<PrinterObjectBoxStruct>(
        model: _entities[9],
        toOneRelations: (PrinterObjectBoxStruct object) => [],
        toManyRelations: (PrinterObjectBoxStruct object) => {},
        getId: (PrinterObjectBoxStruct object) => object.id,
        setId: (PrinterObjectBoxStruct object, int id) {
          object.id = id;
        },
        objectToFB: (PrinterObjectBoxStruct object, fb.Builder fbb) {
          final codeOffset = fbb.writeString(object.code);
          final guid_fixedOffset = fbb.writeString(object.guid_fixed);
          final name1Offset = fbb.writeString(object.name1);
          final print_ip_addressOffset =
              fbb.writeString(object.print_ip_address);
          fbb.startTable(8);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, codeOffset);
          fbb.addOffset(2, guid_fixedOffset);
          fbb.addOffset(3, name1Offset);
          fbb.addInt64(4, object.type);
          fbb.addOffset(5, print_ip_addressOffset);
          fbb.addInt64(6, object.printer_port);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PrinterObjectBoxStruct(
              guid_fixed: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              code: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              name1: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              type: const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              printer_port:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0),
              print_ip_address: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    ProductBarcodeObjectBoxStruct: EntityDefinition<
            ProductBarcodeObjectBoxStruct>(
        model: _entities[10],
        toOneRelations: (ProductBarcodeObjectBoxStruct object) => [],
        toManyRelations: (ProductBarcodeObjectBoxStruct object) => {},
        getId: (ProductBarcodeObjectBoxStruct object) => object.id,
        setId: (ProductBarcodeObjectBoxStruct object, int id) {
          object.id = id;
        },
        objectToFB: (ProductBarcodeObjectBoxStruct object, fb.Builder fbb) {
          final barcodeOffset = fbb.writeString(object.barcode);
          final namesOffset = fbb.writeList(
              object.names.map(fbb.writeString).toList(growable: false));
          final name_allOffset = fbb.writeString(object.name_all);
          final guid_fixedOffset = fbb.writeString(object.guid_fixed);
          final item_guidOffset = fbb.writeString(object.item_guid);
          final descriptionsOffset = fbb.writeList(
              object.descriptions.map(fbb.writeString).toList(growable: false));
          final item_codeOffset = fbb.writeString(object.item_code);
          final item_unit_codeOffset = fbb.writeString(object.item_unit_code);
          final unit_codeOffset = fbb.writeString(object.unit_code);
          final unit_namesOffset = fbb.writeList(
              object.unit_names.map(fbb.writeString).toList(growable: false));
          final options_jsonOffset = fbb.writeString(object.options_json);
          final images_urlOffset = fbb.writeString(object.images_url);
          final color_selectOffset = fbb.writeString(object.color_select);
          final color_select_hexOffset =
              fbb.writeString(object.color_select_hex);
          final pricesOffset = fbb.writeList(
              object.prices.map(fbb.writeString).toList(growable: false));
          fbb.startTable(28);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, barcodeOffset);
          fbb.addOffset(2, namesOffset);
          fbb.addOffset(3, name_allOffset);
          fbb.addOffset(6, guid_fixedOffset);
          fbb.addOffset(7, item_guidOffset);
          fbb.addOffset(8, descriptionsOffset);
          fbb.addOffset(9, item_codeOffset);
          fbb.addOffset(10, item_unit_codeOffset);
          fbb.addOffset(11, unit_codeOffset);
          fbb.addOffset(12, unit_namesOffset);
          fbb.addInt64(14, object.new_line);
          fbb.addFloat64(15, object.product_count);
          fbb.addOffset(16, options_jsonOffset);
          fbb.addOffset(17, images_urlOffset);
          fbb.addOffset(19, color_selectOffset);
          fbb.addOffset(20, color_select_hexOffset);
          fbb.addBool(23, object.image_or_color);
          fbb.addOffset(26, pricesOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProductBarcodeObjectBoxStruct(
              barcode: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              names:
                  const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                      .vTableGet(buffer, rootOffset, 8, []),
              name_all: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              guid_fixed: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              item_guid: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''),
              descriptions:
                  const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false)
                      .vTableGet(buffer, rootOffset, 20, []),
              item_code: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 22, ''),
              item_unit_code: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 24, ''),
              unit_names: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 28, []),
              prices: const fb.ListReader<String>(fb.StringReader(asciiOptimization: true), lazy: false).vTableGet(buffer, rootOffset, 56, []),
              new_line: const fb.Int64Reader().vTableGet(buffer, rootOffset, 32, 0),
              unit_code: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 26, ''),
              options_json: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 36, ''),
              images_url: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 38, ''),
              image_or_color: const fb.BoolReader().vTableGet(buffer, rootOffset, 50, false),
              color_select: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 42, ''),
              color_select_hex: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 44, ''),
              product_count: const fb.Float64Reader().vTableGet(buffer, rootOffset, 34, 0))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    ProductCategoryObjectBoxStruct: EntityDefinition<
            ProductCategoryObjectBoxStruct>(
        model: _entities[11],
        toOneRelations: (ProductCategoryObjectBoxStruct object) => [],
        toManyRelations: (ProductCategoryObjectBoxStruct object) => {},
        getId: (ProductCategoryObjectBoxStruct object) => object.id,
        setId: (ProductCategoryObjectBoxStruct object, int id) {
          object.id = id;
        },
        objectToFB: (ProductCategoryObjectBoxStruct object, fb.Builder fbb) {
          final guid_fixedOffset = fbb.writeString(object.guid_fixed);
          final namesOffset = fbb.writeList(
              object.names.map(fbb.writeString).toList(growable: false));
          final image_urlOffset = fbb.writeString(object.image_url);
          final colorselectOffset = fbb.writeString(object.colorselect);
          final colorselecthexOffset = fbb.writeString(object.colorselecthex);
          final codelistOffset = fbb.writeString(object.codelist);
          final parent_guid_fixedOffset =
              fbb.writeString(object.parent_guid_fixed);
          fbb.startTable(20);
          fbb.addInt64(0, object.id);
          fbb.addOffset(2, guid_fixedOffset);
          fbb.addOffset(3, namesOffset);
          fbb.addOffset(4, image_urlOffset);
          fbb.addOffset(10, colorselectOffset);
          fbb.addOffset(11, colorselecthexOffset);
          fbb.addOffset(14, codelistOffset);
          fbb.addOffset(15, parent_guid_fixedOffset);
          fbb.addBool(16, object.use_image_or_color);
          fbb.addInt64(17, object.xorder);
          fbb.addInt64(18, object.category_count);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ProductCategoryObjectBoxStruct(
              guid_fixed: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              parent_guid_fixed: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 34, ''),
              names: const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 10, []),
              image_url: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              category_count:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 40, 0),
              use_image_or_color: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 36, false),
              xorder: const fb.Int64Reader().vTableGet(buffer, rootOffset, 38, 0),
              colorselect: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 24, ''),
              colorselecthex: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 26, ''),
              codelist: const fb.StringReader(asciiOptimization: true).vTableGet(buffer, rootOffset, 32, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    WalletStruct: EntityDefinition<WalletStruct>(
        model: _entities[12],
        toOneRelations: (WalletStruct object) => [],
        toManyRelations: (WalletStruct object) => {},
        getId: (WalletStruct object) => object.id,
        setId: (WalletStruct object, int id) {
          object.id = id;
        },
        objectToFB: (WalletStruct object, fb.Builder fbb) {
          final codeOffset = fbb.writeString(object.code);
          final name1Offset = fbb.writeString(object.name1);
          final name2Offset = fbb.writeString(object.name2);
          final name3Offset = fbb.writeString(object.name3);
          final name4Offset = fbb.writeString(object.name4);
          final name5Offset = fbb.writeString(object.name5);
          final imageOffset = fbb.writeString(object.image);
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, codeOffset);
          fbb.addOffset(2, name1Offset);
          fbb.addOffset(3, name2Offset);
          fbb.addOffset(4, name3Offset);
          fbb.addOffset(5, name4Offset);
          fbb.addOffset(6, name5Offset);
          fbb.addOffset(7, imageOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = WalletStruct(
              code: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              name1: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              name2: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              name3: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              name4: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              name5: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              image: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''))
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [BankAndWalletObjectBoxStruct] entity fields to define ObjectBox queries.
class BankAndWalletObjectBoxStruct_ {
  /// see [BankAndWalletObjectBoxStruct.id]
  static final id = QueryIntegerProperty<BankAndWalletObjectBoxStruct>(
      _entities[0].properties[0]);

  /// see [BankAndWalletObjectBoxStruct.paymentcode]
  static final paymentcode = QueryStringProperty<BankAndWalletObjectBoxStruct>(
      _entities[0].properties[1]);

  /// see [BankAndWalletObjectBoxStruct.countrycode]
  static final countrycode = QueryStringProperty<BankAndWalletObjectBoxStruct>(
      _entities[0].properties[2]);

  /// see [BankAndWalletObjectBoxStruct.name1]
  static final name1 = QueryStringProperty<BankAndWalletObjectBoxStruct>(
      _entities[0].properties[3]);

  /// see [BankAndWalletObjectBoxStruct.name2]
  static final name2 = QueryStringProperty<BankAndWalletObjectBoxStruct>(
      _entities[0].properties[4]);

  /// see [BankAndWalletObjectBoxStruct.name3]
  static final name3 = QueryStringProperty<BankAndWalletObjectBoxStruct>(
      _entities[0].properties[5]);

  /// see [BankAndWalletObjectBoxStruct.name4]
  static final name4 = QueryStringProperty<BankAndWalletObjectBoxStruct>(
      _entities[0].properties[6]);

  /// see [BankAndWalletObjectBoxStruct.name5]
  static final name5 = QueryStringProperty<BankAndWalletObjectBoxStruct>(
      _entities[0].properties[7]);

  /// see [BankAndWalletObjectBoxStruct.paymentlogo]
  static final paymentlogo = QueryStringProperty<BankAndWalletObjectBoxStruct>(
      _entities[0].properties[8]);

  /// see [BankAndWalletObjectBoxStruct.paymenttype]
  static final paymenttype = QueryIntegerProperty<BankAndWalletObjectBoxStruct>(
      _entities[0].properties[9]);

  /// see [BankAndWalletObjectBoxStruct.feeRate]
  static final feeRate = QueryDoubleProperty<BankAndWalletObjectBoxStruct>(
      _entities[0].properties[10]);

  /// see [BankAndWalletObjectBoxStruct.wallettype]
  static final wallettype = QueryIntegerProperty<BankAndWalletObjectBoxStruct>(
      _entities[0].properties[11]);
}

/// [BillDetailExtraObjectBoxStruct] entity fields to define ObjectBox queries.
class BillDetailExtraObjectBoxStruct_ {
  /// see [BillDetailExtraObjectBoxStruct.id]
  static final id = QueryIntegerProperty<BillDetailExtraObjectBoxStruct>(
      _entities[1].properties[0]);

  /// see [BillDetailExtraObjectBoxStruct.doc_number]
  static final doc_number = QueryStringProperty<BillDetailExtraObjectBoxStruct>(
      _entities[1].properties[1]);

  /// see [BillDetailExtraObjectBoxStruct.ref_line_number]
  static final ref_line_number =
      QueryIntegerProperty<BillDetailExtraObjectBoxStruct>(
          _entities[1].properties[2]);

  /// see [BillDetailExtraObjectBoxStruct.line_number]
  static final line_number =
      QueryIntegerProperty<BillDetailExtraObjectBoxStruct>(
          _entities[1].properties[3]);

  /// see [BillDetailExtraObjectBoxStruct.barcode]
  static final barcode = QueryStringProperty<BillDetailExtraObjectBoxStruct>(
      _entities[1].properties[4]);

  /// see [BillDetailExtraObjectBoxStruct.item_code]
  static final item_code = QueryStringProperty<BillDetailExtraObjectBoxStruct>(
      _entities[1].properties[5]);

  /// see [BillDetailExtraObjectBoxStruct.item_name]
  static final item_name = QueryStringProperty<BillDetailExtraObjectBoxStruct>(
      _entities[1].properties[6]);

  /// see [BillDetailExtraObjectBoxStruct.unit_code]
  static final unit_code = QueryStringProperty<BillDetailExtraObjectBoxStruct>(
      _entities[1].properties[7]);

  /// see [BillDetailExtraObjectBoxStruct.unit_name]
  static final unit_name = QueryStringProperty<BillDetailExtraObjectBoxStruct>(
      _entities[1].properties[8]);

  /// see [BillDetailExtraObjectBoxStruct.qty]
  static final qty = QueryDoubleProperty<BillDetailExtraObjectBoxStruct>(
      _entities[1].properties[9]);

  /// see [BillDetailExtraObjectBoxStruct.price]
  static final price = QueryDoubleProperty<BillDetailExtraObjectBoxStruct>(
      _entities[1].properties[10]);

  /// see [BillDetailExtraObjectBoxStruct.total_amount]
  static final total_amount =
      QueryDoubleProperty<BillDetailExtraObjectBoxStruct>(
          _entities[1].properties[11]);
}

/// [BillDetailObjectBoxStruct] entity fields to define ObjectBox queries.
class BillDetailObjectBoxStruct_ {
  /// see [BillDetailObjectBoxStruct.id]
  static final id = QueryIntegerProperty<BillDetailObjectBoxStruct>(
      _entities[2].properties[0]);

  /// see [BillDetailObjectBoxStruct.doc_number]
  static final doc_number = QueryStringProperty<BillDetailObjectBoxStruct>(
      _entities[2].properties[1]);

  /// see [BillDetailObjectBoxStruct.line_number]
  static final line_number = QueryIntegerProperty<BillDetailObjectBoxStruct>(
      _entities[2].properties[2]);

  /// see [BillDetailObjectBoxStruct.barcode]
  static final barcode = QueryStringProperty<BillDetailObjectBoxStruct>(
      _entities[2].properties[3]);

  /// see [BillDetailObjectBoxStruct.item_code]
  static final item_code = QueryStringProperty<BillDetailObjectBoxStruct>(
      _entities[2].properties[4]);

  /// see [BillDetailObjectBoxStruct.item_name]
  static final item_name = QueryStringProperty<BillDetailObjectBoxStruct>(
      _entities[2].properties[5]);

  /// see [BillDetailObjectBoxStruct.unit_code]
  static final unit_code = QueryStringProperty<BillDetailObjectBoxStruct>(
      _entities[2].properties[6]);

  /// see [BillDetailObjectBoxStruct.unit_name]
  static final unit_name = QueryStringProperty<BillDetailObjectBoxStruct>(
      _entities[2].properties[7]);

  /// see [BillDetailObjectBoxStruct.qty]
  static final qty = QueryDoubleProperty<BillDetailObjectBoxStruct>(
      _entities[2].properties[8]);

  /// see [BillDetailObjectBoxStruct.price]
  static final price = QueryDoubleProperty<BillDetailObjectBoxStruct>(
      _entities[2].properties[9]);

  /// see [BillDetailObjectBoxStruct.discount_text]
  static final discount_text = QueryStringProperty<BillDetailObjectBoxStruct>(
      _entities[2].properties[10]);

  /// see [BillDetailObjectBoxStruct.discount]
  static final discount = QueryDoubleProperty<BillDetailObjectBoxStruct>(
      _entities[2].properties[11]);

  /// see [BillDetailObjectBoxStruct.total_amount]
  static final total_amount = QueryDoubleProperty<BillDetailObjectBoxStruct>(
      _entities[2].properties[12]);
}

/// [BillObjectBoxStruct] entity fields to define ObjectBox queries.
class BillObjectBoxStruct_ {
  /// see [BillObjectBoxStruct.id]
  static final id =
      QueryIntegerProperty<BillObjectBoxStruct>(_entities[3].properties[0]);

  /// see [BillObjectBoxStruct.doc_number]
  static final doc_number =
      QueryStringProperty<BillObjectBoxStruct>(_entities[3].properties[1]);

  /// see [BillObjectBoxStruct.date_time]
  static final date_time =
      QueryIntegerProperty<BillObjectBoxStruct>(_entities[3].properties[2]);

  /// see [BillObjectBoxStruct.customer_code]
  static final customer_code =
      QueryStringProperty<BillObjectBoxStruct>(_entities[3].properties[3]);

  /// see [BillObjectBoxStruct.customer_name]
  static final customer_name =
      QueryStringProperty<BillObjectBoxStruct>(_entities[3].properties[4]);

  /// see [BillObjectBoxStruct.customer_telephone]
  static final customer_telephone =
      QueryStringProperty<BillObjectBoxStruct>(_entities[3].properties[5]);

  /// see [BillObjectBoxStruct.total_amount]
  static final total_amount =
      QueryDoubleProperty<BillObjectBoxStruct>(_entities[3].properties[6]);

  /// see [BillObjectBoxStruct.sale_code]
  static final sale_code =
      QueryStringProperty<BillObjectBoxStruct>(_entities[3].properties[7]);

  /// see [BillObjectBoxStruct.sale_name]
  static final sale_name =
      QueryStringProperty<BillObjectBoxStruct>(_entities[3].properties[8]);

  /// see [BillObjectBoxStruct.is_sync]
  static final is_sync =
      QueryBooleanProperty<BillObjectBoxStruct>(_entities[3].properties[9]);

  /// see [BillObjectBoxStruct.cashier_code]
  static final cashier_code =
      QueryStringProperty<BillObjectBoxStruct>(_entities[3].properties[10]);

  /// see [BillObjectBoxStruct.cashier_name]
  static final cashier_name =
      QueryStringProperty<BillObjectBoxStruct>(_entities[3].properties[11]);

  /// see [BillObjectBoxStruct.pay_cash_amount]
  static final pay_cash_amount =
      QueryDoubleProperty<BillObjectBoxStruct>(_entities[3].properties[12]);

  /// see [BillObjectBoxStruct.discount_formula]
  static final discount_formula =
      QueryStringProperty<BillObjectBoxStruct>(_entities[3].properties[13]);

  /// see [BillObjectBoxStruct.sum_discount]
  static final sum_discount =
      QueryDoubleProperty<BillObjectBoxStruct>(_entities[3].properties[14]);

  /// see [BillObjectBoxStruct.sum_credit_card]
  static final sum_credit_card =
      QueryDoubleProperty<BillObjectBoxStruct>(_entities[3].properties[15]);

  /// see [BillObjectBoxStruct.sum_money_transfer]
  static final sum_money_transfer =
      QueryDoubleProperty<BillObjectBoxStruct>(_entities[3].properties[16]);

  /// see [BillObjectBoxStruct.sum_cheque]
  static final sum_cheque =
      QueryDoubleProperty<BillObjectBoxStruct>(_entities[3].properties[17]);

  /// see [BillObjectBoxStruct.sum_coupon]
  static final sum_coupon =
      QueryDoubleProperty<BillObjectBoxStruct>(_entities[3].properties[18]);

  /// see [BillObjectBoxStruct.sum_qr_code]
  static final sum_qr_code =
      QueryDoubleProperty<BillObjectBoxStruct>(_entities[3].properties[19]);
}

/// [BillPayObjectBoxStruct] entity fields to define ObjectBox queries.
class BillPayObjectBoxStruct_ {
  /// see [BillPayObjectBoxStruct.id]
  static final id =
      QueryIntegerProperty<BillPayObjectBoxStruct>(_entities[4].properties[0]);

  /// see [BillPayObjectBoxStruct.doc_number]
  static final doc_number =
      QueryStringProperty<BillPayObjectBoxStruct>(_entities[4].properties[1]);

  /// see [BillPayObjectBoxStruct.trans_flag]
  static final trans_flag =
      QueryIntegerProperty<BillPayObjectBoxStruct>(_entities[4].properties[2]);

  /// see [BillPayObjectBoxStruct.bank_code]
  static final bank_code =
      QueryStringProperty<BillPayObjectBoxStruct>(_entities[4].properties[3]);

  /// see [BillPayObjectBoxStruct.bank_name]
  static final bank_name =
      QueryStringProperty<BillPayObjectBoxStruct>(_entities[4].properties[4]);

  /// see [BillPayObjectBoxStruct.bank_account_no]
  static final bank_account_no =
      QueryStringProperty<BillPayObjectBoxStruct>(_entities[4].properties[5]);

  /// see [BillPayObjectBoxStruct.card_number]
  static final card_number =
      QueryStringProperty<BillPayObjectBoxStruct>(_entities[4].properties[6]);

  /// see [BillPayObjectBoxStruct.approved_code]
  static final approved_code =
      QueryStringProperty<BillPayObjectBoxStruct>(_entities[4].properties[7]);

  /// see [BillPayObjectBoxStruct.doc_date_time]
  static final doc_date_time =
      QueryIntegerProperty<BillPayObjectBoxStruct>(_entities[4].properties[8]);

  /// see [BillPayObjectBoxStruct.branch_number]
  static final branch_number =
      QueryStringProperty<BillPayObjectBoxStruct>(_entities[4].properties[9]);

  /// see [BillPayObjectBoxStruct.bank_referance]
  static final bank_referance =
      QueryStringProperty<BillPayObjectBoxStruct>(_entities[4].properties[10]);

  /// see [BillPayObjectBoxStruct.due_date]
  static final due_date =
      QueryIntegerProperty<BillPayObjectBoxStruct>(_entities[4].properties[11]);

  /// see [BillPayObjectBoxStruct.cheque_number]
  static final cheque_number =
      QueryStringProperty<BillPayObjectBoxStruct>(_entities[4].properties[12]);

  /// see [BillPayObjectBoxStruct.code]
  static final code =
      QueryStringProperty<BillPayObjectBoxStruct>(_entities[4].properties[13]);

  /// see [BillPayObjectBoxStruct.description]
  static final description =
      QueryStringProperty<BillPayObjectBoxStruct>(_entities[4].properties[14]);

  /// see [BillPayObjectBoxStruct.number]
  static final number =
      QueryStringProperty<BillPayObjectBoxStruct>(_entities[4].properties[15]);

  /// see [BillPayObjectBoxStruct.referance_one]
  static final referance_one =
      QueryStringProperty<BillPayObjectBoxStruct>(_entities[4].properties[16]);

  /// see [BillPayObjectBoxStruct.referance_two]
  static final referance_two =
      QueryStringProperty<BillPayObjectBoxStruct>(_entities[4].properties[17]);

  /// see [BillPayObjectBoxStruct.provider_code]
  static final provider_code =
      QueryStringProperty<BillPayObjectBoxStruct>(_entities[4].properties[18]);

  /// see [BillPayObjectBoxStruct.provider_name]
  static final provider_name =
      QueryStringProperty<BillPayObjectBoxStruct>(_entities[4].properties[19]);

  /// see [BillPayObjectBoxStruct.amount]
  static final amount =
      QueryDoubleProperty<BillPayObjectBoxStruct>(_entities[4].properties[20]);
}

/// [ConfigObjectBoxStruct] entity fields to define ObjectBox queries.
class ConfigObjectBoxStruct_ {
  /// see [ConfigObjectBoxStruct.id]
  static final id =
      QueryIntegerProperty<ConfigObjectBoxStruct>(_entities[5].properties[0]);

  /// see [ConfigObjectBoxStruct.device_code]
  static final device_code =
      QueryStringProperty<ConfigObjectBoxStruct>(_entities[5].properties[1]);

  /// see [ConfigObjectBoxStruct.last_doc_number]
  static final last_doc_number =
      QueryStringProperty<ConfigObjectBoxStruct>(_entities[5].properties[2]);
}

/// [EmployeeObjectBoxStruct] entity fields to define ObjectBox queries.
class EmployeeObjectBoxStruct_ {
  /// see [EmployeeObjectBoxStruct.id]
  static final id =
      QueryIntegerProperty<EmployeeObjectBoxStruct>(_entities[6].properties[0]);

  /// see [EmployeeObjectBoxStruct.guidfixed]
  static final guidfixed =
      QueryStringProperty<EmployeeObjectBoxStruct>(_entities[6].properties[1]);

  /// see [EmployeeObjectBoxStruct.code]
  static final code =
      QueryStringProperty<EmployeeObjectBoxStruct>(_entities[6].properties[2]);

  /// see [EmployeeObjectBoxStruct.username]
  static final username =
      QueryStringProperty<EmployeeObjectBoxStruct>(_entities[6].properties[3]);

  /// see [EmployeeObjectBoxStruct.profilepicture]
  static final profilepicture =
      QueryStringProperty<EmployeeObjectBoxStruct>(_entities[6].properties[4]);

  /// see [EmployeeObjectBoxStruct.name]
  static final name =
      QueryStringProperty<EmployeeObjectBoxStruct>(_entities[6].properties[5]);
}

/// [MemberObjectBoxStruct] entity fields to define ObjectBox queries.
class MemberObjectBoxStruct_ {
  /// see [MemberObjectBoxStruct.id]
  static final id =
      QueryIntegerProperty<MemberObjectBoxStruct>(_entities[7].properties[0]);

  /// see [MemberObjectBoxStruct.guidfixed]
  static final guidfixed =
      QueryStringProperty<MemberObjectBoxStruct>(_entities[7].properties[1]);

  /// see [MemberObjectBoxStruct.address]
  static final address =
      QueryStringProperty<MemberObjectBoxStruct>(_entities[7].properties[2]);

  /// see [MemberObjectBoxStruct.branchcode]
  static final branchcode =
      QueryStringProperty<MemberObjectBoxStruct>(_entities[7].properties[3]);

  /// see [MemberObjectBoxStruct.branchtype]
  static final branchtype =
      QueryIntegerProperty<MemberObjectBoxStruct>(_entities[7].properties[4]);

  /// see [MemberObjectBoxStruct.contacttype]
  static final contacttype =
      QueryIntegerProperty<MemberObjectBoxStruct>(_entities[7].properties[5]);

  /// see [MemberObjectBoxStruct.name]
  static final name =
      QueryStringProperty<MemberObjectBoxStruct>(_entities[7].properties[6]);

  /// see [MemberObjectBoxStruct.personaltype]
  static final personaltype =
      QueryIntegerProperty<MemberObjectBoxStruct>(_entities[7].properties[7]);

  /// see [MemberObjectBoxStruct.surname]
  static final surname =
      QueryStringProperty<MemberObjectBoxStruct>(_entities[7].properties[8]);

  /// see [MemberObjectBoxStruct.taxid]
  static final taxid =
      QueryStringProperty<MemberObjectBoxStruct>(_entities[7].properties[9]);

  /// see [MemberObjectBoxStruct.telephone]
  static final telephone =
      QueryStringProperty<MemberObjectBoxStruct>(_entities[7].properties[10]);

  /// see [MemberObjectBoxStruct.zipcode]
  static final zipcode =
      QueryStringProperty<MemberObjectBoxStruct>(_entities[7].properties[11]);
}

/// [PosLogObjectBoxStruct] entity fields to define ObjectBox queries.
class PosLogObjectBoxStruct_ {
  /// see [PosLogObjectBoxStruct.id]
  static final id =
      QueryIntegerProperty<PosLogObjectBoxStruct>(_entities[8].properties[0]);

  /// see [PosLogObjectBoxStruct.guid_auto_fixed]
  static final guid_auto_fixed =
      QueryStringProperty<PosLogObjectBoxStruct>(_entities[8].properties[1]);

  /// see [PosLogObjectBoxStruct.guid_ref]
  static final guid_ref =
      QueryStringProperty<PosLogObjectBoxStruct>(_entities[8].properties[2]);

  /// see [PosLogObjectBoxStruct.guid_code_ref]
  static final guid_code_ref =
      QueryStringProperty<PosLogObjectBoxStruct>(_entities[8].properties[3]);

  /// see [PosLogObjectBoxStruct.log_date_time]
  static final log_date_time =
      QueryIntegerProperty<PosLogObjectBoxStruct>(_entities[8].properties[4]);

  /// see [PosLogObjectBoxStruct.hold_number]
  static final hold_number =
      QueryIntegerProperty<PosLogObjectBoxStruct>(_entities[8].properties[5]);

  /// see [PosLogObjectBoxStruct.command_code]
  static final command_code =
      QueryIntegerProperty<PosLogObjectBoxStruct>(_entities[8].properties[6]);

  /// see [PosLogObjectBoxStruct.is_void]
  static final is_void =
      QueryIntegerProperty<PosLogObjectBoxStruct>(_entities[8].properties[7]);

  /// see [PosLogObjectBoxStruct.success]
  static final success =
      QueryIntegerProperty<PosLogObjectBoxStruct>(_entities[8].properties[8]);

  /// see [PosLogObjectBoxStruct.extra_code]
  static final extra_code =
      QueryStringProperty<PosLogObjectBoxStruct>(_entities[8].properties[9]);

  /// see [PosLogObjectBoxStruct.remark]
  static final remark =
      QueryStringProperty<PosLogObjectBoxStruct>(_entities[8].properties[10]);

  /// see [PosLogObjectBoxStruct.discountText]
  static final discountText =
      QueryStringProperty<PosLogObjectBoxStruct>(_entities[8].properties[11]);

  /// see [PosLogObjectBoxStruct.code]
  static final code =
      QueryStringProperty<PosLogObjectBoxStruct>(_entities[8].properties[12]);

  /// see [PosLogObjectBoxStruct.price]
  static final price =
      QueryDoubleProperty<PosLogObjectBoxStruct>(_entities[8].properties[13]);

  /// see [PosLogObjectBoxStruct.name]
  static final name =
      QueryStringProperty<PosLogObjectBoxStruct>(_entities[8].properties[14]);

  /// see [PosLogObjectBoxStruct.qty]
  static final qty =
      QueryDoubleProperty<PosLogObjectBoxStruct>(_entities[8].properties[15]);

  /// see [PosLogObjectBoxStruct.qty_fixed]
  static final qty_fixed =
      QueryDoubleProperty<PosLogObjectBoxStruct>(_entities[8].properties[16]);

  /// see [PosLogObjectBoxStruct.default_code]
  static final default_code =
      QueryStringProperty<PosLogObjectBoxStruct>(_entities[8].properties[17]);

  /// see [PosLogObjectBoxStruct.selected]
  static final selected =
      QueryBooleanProperty<PosLogObjectBoxStruct>(_entities[8].properties[18]);

  /// see [PosLogObjectBoxStruct.unit_code]
  static final unit_code =
      QueryStringProperty<PosLogObjectBoxStruct>(_entities[8].properties[19]);

  /// see [PosLogObjectBoxStruct.unit_name]
  static final unit_name =
      QueryStringProperty<PosLogObjectBoxStruct>(_entities[8].properties[20]);

  /// see [PosLogObjectBoxStruct.barcode]
  static final barcode =
      QueryStringProperty<PosLogObjectBoxStruct>(_entities[8].properties[21]);
}

/// [PrinterObjectBoxStruct] entity fields to define ObjectBox queries.
class PrinterObjectBoxStruct_ {
  /// see [PrinterObjectBoxStruct.id]
  static final id =
      QueryIntegerProperty<PrinterObjectBoxStruct>(_entities[9].properties[0]);

  /// see [PrinterObjectBoxStruct.code]
  static final code =
      QueryStringProperty<PrinterObjectBoxStruct>(_entities[9].properties[1]);

  /// see [PrinterObjectBoxStruct.guid_fixed]
  static final guid_fixed =
      QueryStringProperty<PrinterObjectBoxStruct>(_entities[9].properties[2]);

  /// see [PrinterObjectBoxStruct.name1]
  static final name1 =
      QueryStringProperty<PrinterObjectBoxStruct>(_entities[9].properties[3]);

  /// see [PrinterObjectBoxStruct.type]
  static final type =
      QueryIntegerProperty<PrinterObjectBoxStruct>(_entities[9].properties[4]);

  /// see [PrinterObjectBoxStruct.print_ip_address]
  static final print_ip_address =
      QueryStringProperty<PrinterObjectBoxStruct>(_entities[9].properties[5]);

  /// see [PrinterObjectBoxStruct.printer_port]
  static final printer_port =
      QueryIntegerProperty<PrinterObjectBoxStruct>(_entities[9].properties[6]);
}

/// [ProductBarcodeObjectBoxStruct] entity fields to define ObjectBox queries.
class ProductBarcodeObjectBoxStruct_ {
  /// see [ProductBarcodeObjectBoxStruct.id]
  static final id = QueryIntegerProperty<ProductBarcodeObjectBoxStruct>(
      _entities[10].properties[0]);

  /// see [ProductBarcodeObjectBoxStruct.barcode]
  static final barcode = QueryStringProperty<ProductBarcodeObjectBoxStruct>(
      _entities[10].properties[1]);

  /// see [ProductBarcodeObjectBoxStruct.names]
  static final names = QueryStringVectorProperty<ProductBarcodeObjectBoxStruct>(
      _entities[10].properties[2]);

  /// see [ProductBarcodeObjectBoxStruct.name_all]
  static final name_all = QueryStringProperty<ProductBarcodeObjectBoxStruct>(
      _entities[10].properties[3]);

  /// see [ProductBarcodeObjectBoxStruct.guid_fixed]
  static final guid_fixed = QueryStringProperty<ProductBarcodeObjectBoxStruct>(
      _entities[10].properties[4]);

  /// see [ProductBarcodeObjectBoxStruct.item_guid]
  static final item_guid = QueryStringProperty<ProductBarcodeObjectBoxStruct>(
      _entities[10].properties[5]);

  /// see [ProductBarcodeObjectBoxStruct.descriptions]
  static final descriptions =
      QueryStringVectorProperty<ProductBarcodeObjectBoxStruct>(
          _entities[10].properties[6]);

  /// see [ProductBarcodeObjectBoxStruct.item_code]
  static final item_code = QueryStringProperty<ProductBarcodeObjectBoxStruct>(
      _entities[10].properties[7]);

  /// see [ProductBarcodeObjectBoxStruct.item_unit_code]
  static final item_unit_code =
      QueryStringProperty<ProductBarcodeObjectBoxStruct>(
          _entities[10].properties[8]);

  /// see [ProductBarcodeObjectBoxStruct.unit_code]
  static final unit_code = QueryStringProperty<ProductBarcodeObjectBoxStruct>(
      _entities[10].properties[9]);

  /// see [ProductBarcodeObjectBoxStruct.unit_names]
  static final unit_names =
      QueryStringVectorProperty<ProductBarcodeObjectBoxStruct>(
          _entities[10].properties[10]);

  /// see [ProductBarcodeObjectBoxStruct.new_line]
  static final new_line = QueryIntegerProperty<ProductBarcodeObjectBoxStruct>(
      _entities[10].properties[11]);

  /// see [ProductBarcodeObjectBoxStruct.product_count]
  static final product_count =
      QueryDoubleProperty<ProductBarcodeObjectBoxStruct>(
          _entities[10].properties[12]);

  /// see [ProductBarcodeObjectBoxStruct.options_json]
  static final options_json =
      QueryStringProperty<ProductBarcodeObjectBoxStruct>(
          _entities[10].properties[13]);

  /// see [ProductBarcodeObjectBoxStruct.images_url]
  static final images_url = QueryStringProperty<ProductBarcodeObjectBoxStruct>(
      _entities[10].properties[14]);

  /// see [ProductBarcodeObjectBoxStruct.color_select]
  static final color_select =
      QueryStringProperty<ProductBarcodeObjectBoxStruct>(
          _entities[10].properties[15]);

  /// see [ProductBarcodeObjectBoxStruct.color_select_hex]
  static final color_select_hex =
      QueryStringProperty<ProductBarcodeObjectBoxStruct>(
          _entities[10].properties[16]);

  /// see [ProductBarcodeObjectBoxStruct.image_or_color]
  static final image_or_color =
      QueryBooleanProperty<ProductBarcodeObjectBoxStruct>(
          _entities[10].properties[17]);

  /// see [ProductBarcodeObjectBoxStruct.prices]
  static final prices =
      QueryStringVectorProperty<ProductBarcodeObjectBoxStruct>(
          _entities[10].properties[18]);
}

/// [ProductCategoryObjectBoxStruct] entity fields to define ObjectBox queries.
class ProductCategoryObjectBoxStruct_ {
  /// see [ProductCategoryObjectBoxStruct.id]
  static final id = QueryIntegerProperty<ProductCategoryObjectBoxStruct>(
      _entities[11].properties[0]);

  /// see [ProductCategoryObjectBoxStruct.guid_fixed]
  static final guid_fixed = QueryStringProperty<ProductCategoryObjectBoxStruct>(
      _entities[11].properties[1]);

  /// see [ProductCategoryObjectBoxStruct.names]
  static final names =
      QueryStringVectorProperty<ProductCategoryObjectBoxStruct>(
          _entities[11].properties[2]);

  /// see [ProductCategoryObjectBoxStruct.image_url]
  static final image_url = QueryStringProperty<ProductCategoryObjectBoxStruct>(
      _entities[11].properties[3]);

  /// see [ProductCategoryObjectBoxStruct.colorselect]
  static final colorselect =
      QueryStringProperty<ProductCategoryObjectBoxStruct>(
          _entities[11].properties[4]);

  /// see [ProductCategoryObjectBoxStruct.colorselecthex]
  static final colorselecthex =
      QueryStringProperty<ProductCategoryObjectBoxStruct>(
          _entities[11].properties[5]);

  /// see [ProductCategoryObjectBoxStruct.codelist]
  static final codelist = QueryStringProperty<ProductCategoryObjectBoxStruct>(
      _entities[11].properties[6]);

  /// see [ProductCategoryObjectBoxStruct.parent_guid_fixed]
  static final parent_guid_fixed =
      QueryStringProperty<ProductCategoryObjectBoxStruct>(
          _entities[11].properties[7]);

  /// see [ProductCategoryObjectBoxStruct.use_image_or_color]
  static final use_image_or_color =
      QueryBooleanProperty<ProductCategoryObjectBoxStruct>(
          _entities[11].properties[8]);

  /// see [ProductCategoryObjectBoxStruct.xorder]
  static final xorder = QueryIntegerProperty<ProductCategoryObjectBoxStruct>(
      _entities[11].properties[9]);

  /// see [ProductCategoryObjectBoxStruct.category_count]
  static final category_count =
      QueryIntegerProperty<ProductCategoryObjectBoxStruct>(
          _entities[11].properties[10]);
}

/// [WalletStruct] entity fields to define ObjectBox queries.
class WalletStruct_ {
  /// see [WalletStruct.id]
  static final id =
      QueryIntegerProperty<WalletStruct>(_entities[12].properties[0]);

  /// see [WalletStruct.code]
  static final code =
      QueryStringProperty<WalletStruct>(_entities[12].properties[1]);

  /// see [WalletStruct.name1]
  static final name1 =
      QueryStringProperty<WalletStruct>(_entities[12].properties[2]);

  /// see [WalletStruct.name2]
  static final name2 =
      QueryStringProperty<WalletStruct>(_entities[12].properties[3]);

  /// see [WalletStruct.name3]
  static final name3 =
      QueryStringProperty<WalletStruct>(_entities[12].properties[4]);

  /// see [WalletStruct.name4]
  static final name4 =
      QueryStringProperty<WalletStruct>(_entities[12].properties[5]);

  /// see [WalletStruct.name5]
  static final name5 =
      QueryStringProperty<WalletStruct>(_entities[12].properties[6]);

  /// see [WalletStruct.image]
  static final image =
      QueryStringProperty<WalletStruct>(_entities[12].properties[7]);
}
